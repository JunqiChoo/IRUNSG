
const Event = require("../Models/Event");
const Participant = require("../Models/Participant");
const connectDB = require('../Database/MongoDB');
const getAllEventsOngoing = async(req,res)=>{
    await connectDB();
    try{
        const events = await Event.find({EventStatus:false});
        res.json(events)
    }catch(err){
        console.log(err)
    }
}
const getAllEventsCompleted = async(req,res)=>{
  const UserID = req.params.id
    await connectDB();
    try{
        const events = await Event.find({EventStatus:true,UserID:UserID});
        res.json(events)
       
    }catch(err){
        console.log(err)
    }
}
const getChartData = async (req, res) => {
  await connectDB();
  try {
    const events = await Event.find();
    const regionCount = {};

    events.forEach(event => {
      if (event.region) {
        regionCount[event.region] = (regionCount[event.region] || 0) + 1;
      }
    });
    console.log("Region counts:", regionCount); 
    res.json(regionCount);  // ✅ Send the full object
  } catch (err) {
    console.error("Error in getChartData:", err);
    res.status(500).json({ error: 'Internal server error' });
  }
};

const createEvent = async (req, res) => {
  await connectDB();
  try {
    const {
      eventName,
      postal,
      runtype,
      distance,
      duration,
      UserID,
      EventStatus,
      date,
      region,
      points // ✅ must come from frontend or calculated
    } = req.body;

    const newEvent = new Event({
      eventName,
      postal,
      runtype,
      distance,
      duration,
      UserID,
      EventStatus,
      date: new Date(date),
      region,
      points
    });

    const result = await newEvent.save();
    console.log('Event created:', result);

    res.status(201).json({ message: 'Event created successfully', event: result });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: 'Failed to create event' });
  }
};

const getEvent = async(req,res)=>{
  console.log(req.params.id)
  await connectDB();
  try{
    const result = await Event.findById(req.params.id)
    res.json(result)
  }catch(err){
    console.log("Hey you got an error while retrieving event")
    console.log(err)
  }
};
const editEvent = async(req,res)=>{
  const eventID = req.params.eid
  const {
      eventName,
      postal,
      runtype,
      distance,
      duration,
      date,
      region
    } = req.body;
  try{
    const result = await Event.findByIdAndUpdate(eventID,{
       eventName:eventName,
      postal:postal,
      runtype:runtype,
      distance:distance,
      duration:duration,
      date:new Date(date),
      region:region,
    })
    res.json(result)
  }catch(err){
    res.json(err)
  }
}
const completeEvent = async(req,res)=>{
    const eventID = req.params.eid
    await connectDB();
    try{
      const result = await Event.findByIdAndUpdate(eventID,{EventStatus:true}, { new: true })
      res.json(result)
    }catch(err){
      res.json(err);
    }
}
const deleteEvent = async(req,res)=>{
    const eventID = req.params.eid
    await connectDB();
    try{
        const result = await Event.findByIdAndDelete(eventID)
        //here to delete the user from Participation list
        const delParticipantsResult = await Participant.deleteMany({eventID:eventID})
        await res.json(result)
    }catch(err){
      res.json(err);
    }

}

module.exports = {getAllEventsOngoing,getAllEventsCompleted,getChartData,createEvent,getEvent,completeEvent,deleteEvent,editEvent}